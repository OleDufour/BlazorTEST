@page "/voteCast/{propositionId}"
@using TEST.Server
@using TEST.Shared
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager;
@inject HttpClient Http


<h4>La proposition '@proposition?.Title' du dossier @proposition?.Dossier?.Title    </h4>


<EditForm Model="voteCasted" OnValidSubmit="@Add">
    <div class="container">

        @*<InputText id="Dossier" style="display:none;" disabled="disabled" @bind-Value="voteCasted." placeholder="Votre dossier" class="invoerveld" />*@

        <label class="checkboxContainer">
            Je suis pour cette proposition
            <InputCheckbox @bind-Value="pour" />
            <span class="checkmark"></span>
        </label>


        <label class="checkboxContainer">
            Je suis contre cette proposition
            <InputCheckbox @bind-Value="contre" />
            <span class="checkmark"></span>
        </label>

    </div>
    <button type="submit" class="">Submit</button>
</EditForm>


@code {
    [Parameter]
    public string propositionId { get; set; }

    public Proposition proposition = new Proposition();
    VoteCasted voteCasted = new VoteCasted();

    bool _pour;
    bool pour
    {

        get { return _pour; }
        set
        {
            if (!_pour && _contre) _contre = false;
            _pour = value;
        }
    }


    bool _contre;
    bool contre
    {

        get { return _contre; }
        set
        {
            if (!_contre && _pour) _pour = false;
            _contre = value;
        }
    }


    private async Task Add()
    {
        // var res = await Http.PostAsJsonAsync("Vote/Cast", vote);
        Console.WriteLine("contre", contre.ToString());
        Console.WriteLine("pour", pour.ToString());
        Console.WriteLine("pour2", "pour.ToString()");
        Console.WriteLine(pour.ToString());

        voteCasted.VotedFor = pour;
        voteCasted.PropositionId = Convert.ToInt32(propositionId);

        var res = await Http.PostAsJsonAsync("Vote/Cast", voteCasted);
        Console.WriteLine(res);


        NavigationManager.NavigateTo("voteCastResult/");
    }


    protected override async Task OnInitializedAsync()
    {
        Response<Proposition> response = await Http.GetFromJsonAsync<Response<Proposition>>($"Vote/GetProposition/{propositionId}");
        proposition = response.Data;
    }

}