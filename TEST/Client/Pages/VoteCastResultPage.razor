@page "/voteCastResult/{propositionId}"
@using TEST.Server
@using TEST.Shared
@inject HttpClient Http

@{
    if (votesCasted.Count > 0)
    {
        Dossier dossier = @votesCasted[0]?.Proposition?.Dossier;
        <h1>Le dossier <a href="/dossierDetail/@dossier?.Id">@dossier?.Title</a> </h1>
        <h2>La proposition @votesCasted[0]?.Proposition?.Title </h2>
        <h3>La proposition @votesCasted[0]?.Proposition?.Content ddddddddddddd</h3>
    }
}

<EditForm Model="votesCasted">
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Nom</th>
                <th scope="col">Voté...</th>
                <th scope="col">Contre</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (VoteCasted v in votesCasted)
            {
                <tr>
                    <td>
                        @v.User.Email
                    </td>
                    <td>
                        @{
                            if (v.VotedFor)
                            { <span>Pour</span> }
                            else
                            { <span>Contre</span> }
                        }
                    </td>                
                    <td>
                        @v.VotedDate.ToString("dd/MM/yyyy hh:mm")
                    </td>
                </tr>
            }
        </tbody>
    </table>
</EditForm>


@code {
    [Parameter]
    public string propositionId { get; set; }


    List<VoteCasted> votesCasted = new List<VoteCasted>();


    protected override async Task OnInitializedAsync()
    {
        ResponseList<VoteCasted> response = await Http.GetFromJsonAsync<ResponseList<VoteCasted>>($"Proposition/GetVotesCasted/{propositionId}");
        votesCasted = response.Data;
    }
}